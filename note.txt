拒绝合并无关的历史
本地初始化的项目 与 github 版本不一致, 导致无法提交
git pull origin master --allow-unrelated-histories

docker File sharing失败
暂时修复不了
https://stackoverflow.com/questions/57819352/docker-desktop-for-macos-cant-add-usr-local-folder-in-preferences-file-sharing

查询应用所有日志
http://localhost:10101/actuator/loggers
查询应用指定日志
http://localhost:10101/actuator/loggers/org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping


快速导航
https://mousika.grafana.net/a/cloud-home-app/onboarding-flow/start
创建的面板
https://mousika.grafana.net/d/rpfmFFz7za/prometheus-starter

https://www.xlabs.club/blog/spring-boot-micrometer/
自定义指标规范
指标和 Tag 命名约定使用英语句号分隔，全小写，Tag 可根据实际情况使用缩写。指标名在不同的 MeterRegistry 里会自动转换，比如在 Prometheus 会把 fs.sms.send 转换为 fs_sms_send。
指标命名建议以 fs.application.action 为模板，避免与开源或其他项目组冲突。
注意 Tag values 不能为 Null， 且必须是可枚举的某些固定类型便于统计。
使用注解@Timed @Counted会默认增加 method、class、result、exception 这几个 Tag，注意不要与之冲突。
公司和开源默认 Tag 如下，这些会被 ServiceMonitor 强制覆盖，业务不要自己定义。
namespace、application、service、container、pod、instance、job、endpoint、id
编码中如果需要 MeterRegistry，不允许引用具体实现（比如 Prometheus 的 io.prometheus.client.CollectorRegistry），而是使用 Micrometer 提供的统一接口 MeterRegistry。类比，在打印日志时不允许直接使用 logback 或 log4j api，而是使用 slf4j api.
不要自己 new MeterRegistry，而是使用自动注入的或静态方法。
建议为指标加上 description 字段。


kafka rabbitmq 区别
https://cloud.baidu.com/qianfandev/topic/361471

将项目中的Java代码格式化:spring-javaformat:apply


Spring Boot 自动将 ObservationRegistry 替换为 TestObservationRegistry 的机制与 Spring Test 相关的自动配置和上下文初始化过程有关。具体实现主要涉及到以下几个关键组件：

1. ObservationAutoConfiguration
Spring Boot 通过自动配置类 ObservationAutoConfiguration 来初始化 ObservationRegistry，并在适当的情况下注册它的实现。
这是 Spring Boot 自动配置机制的一部分，位于 spring-boot-actuator-autoconfigure 模块中。
2. TestObservationRegistry
TestObservationRegistry 是 ObservationRegistry 的一个专用子类，用于在测试环境中捕获观测信息，通常用于断言测试。
该类位于 micrometer-observation 相关依赖中，具体来说是 micrometer-observation JAR 包。
3. ObservationTestExecutionListener
这个类是测试执行的监听器，用来在测试上下文中替换 ObservationRegistry。它会监听测试启动和结束的生命周期，并将 ObservationRegistry 替换为 TestObservationRegistry。
这个监听器位于 micrometer-spring-legacy JAR 包中，用来在 Spring Test 中自动配置和替换 ObservationRegistry。
实现替换机制的具体类
1. ObservationTestExecutionListener
ObservationTestExecutionListener 是实现 ObservationRegistry 替换的关键类。它是一个 Spring 的测试监听器，用于在测试上下文启动时进行相关配置。这意味着在 Spring Test 框架启动时，会通过该监听器把标准的 ObservationRegistry 替换为 TestObservationRegistry。

所在的 JAR 包：micrometer-spring-legacy
所在的类：ObservationTestExecutionListener
2. ObservationAutoConfiguration
自动配置类 ObservationAutoConfiguration 负责在生产环境中注入 ObservationRegistry，而在测试环境下，Spring 会使用上述的监听器将其替换为 TestObservationRegistry。

所在的 JAR 包：spring-boot-actuator-autoconfigure
所在的类：ObservationAutoConfiguration
运行流程
Spring Test Context Setup: 当你运行测试用例并使用 @SpringBootTest 或其他测试注解时，Spring 会自动初始化测试上下文，包括注册所有需要的 Bean。
TestObservationRegistry 替换: 在测试上下文启动时，ObservationTestExecutionListener 监听器会介入，将默认的 ObservationRegistry 替换为 TestObservationRegistry。
断言支持: 在测试中，使用 TestObservationRegistryAssert 进行断言时，TestObservationRegistry 捕获的观测数据可以轻松被验证。
总结
替换机制所在类: ObservationTestExecutionListener
所在 JAR 包: micrometer-spring-legacy
这个机制确保了在测试环境中，ObservationRegistry 会自动替换为 TestObservationRegistry，从而支持测试中的观测断言。




Loki 是一个日志系统，由 Grafana Labs 开发，旨在与 Prometheus 和 Grafana 无缝集成。它专注于高效地处理、存储和查询日志数据。
Loki 的设计理念是将日志数据的索引和存储分开，从而降低存储成本并提高查询效率。

### Loki 的主要特点：

1. **与 Prometheus 集成：** Loki 和 Prometheus 使用相似的标签系统，使得你可以轻松地将日志与指标关联起来，从而获得更全面的监控视图。
2. **低成本存储：** Loki 将日志数据的索引与数据本身分开存储，从而降低存储和处理的成本。
3. **灵活的查询：** Loki 支持基于日志标签的查询，你可以方便地根据时间、标签和内容进行检索。
4. **与 Grafana 集成：** Loki 可以与 Grafana 无缝集成，使你能够在 Grafana 中直接查看和分析日志数据。

### 在 Spring Boot + Prometheus + Grafana + Micrometer 的系统中加入 Loki 的理由：

1. **统一视图：** 如果你已经使用 Prometheus 和 Grafana 来监控指标，Loki 可以将日志数据集成到同一个仪表板中，提供统一的监控和日志视图。
2. **丰富的日志分析：** Loki 可以提供详细的日志分析和查询能力，这对于故障排查和性能监控非常有用。
3. **简化问题定位：** 将日志和指标结合起来，你可以更快地找到问题的根源，例如通过查看异常日志和对应的指标变化。

### 是否有必要加入 Loki：

- **如果你需要集成的日志和指标视图：** Loki 可以显著增强你的监控能力，使你可以在 Grafana 中通过日志和指标之间的关联更好地理解系统行为。
- **如果现有日志管理系统已经满足需求：** 如果你已经有一个日志管理和分析系统，并且它能满足你的需求，那么引入 Loki 可能不是必要的，除非你希望利用 Grafana 提供的统一视图。

总结来说，Loki 在一个已有的 Spring Boot + Prometheus + Grafana + Micrometer 系统中提供了日志集成的优势，特别是在你希望将日志与指标结合在一个统一的界面中查看和分析时。如果你已经使用 Grafana 来监控系统，那么加入 Loki 可能会让你的监控系统更加完整和强大。